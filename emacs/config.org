#+title: Emacs configuration
#+date:  2021-02-01

* Color scheme
  ~(interactive)~ will mark the functions as interactive commands
  making them available via =M-x=.

  #+begin_src emacs-lisp
    (defun dark ()
      (interactive)
      (load-theme 'deeper-blue t))
    (defun light ()
      (interactive)
      (disable-theme 'deeper-blue))
  #+end_src

* Customizations
  Follow symbolic links without asking:

  #+begin_src emacs-lisp
    (setq vc-follow-symlinks t)
  #+end_src

  Enable interactive fuzzy matching for file/buffer search.
  ~ido-everywhere~ also replaces functions for file/buffer picking by
  Ido prompt to hook it into more places/packages.

  #+begin_src emacs-lisp
    (ido-mode 1)
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
  #+end_src

* Backups
  Store numbered backup versions in a global directory and delete the
  excessive (controlled by ~kept-old/new-versions~) old versions
  automatically.  Store autosave files in the save directory and
  reduce autosave interval and autosave idle timeout.

  #+begin_src emacs-lisp
    (setq backup-directory-alist '(("." . "~/.cache/emacs/backup")))
    (setq version-control t)
    (setq delete-old-versions t)
    (setq auto-save-file-name-transforms '((".*" "~/.cache/emacs/backup/" t)))
    (setq auto-save-interval 20)
    (setq auto-save-timeout 10)
  #+end_src

* Org mode

** Locations
   #+begin_src emacs-lisp
     (setq org-directory "~/org")
     (setq org-default-notes-file "~/org/inbox.org")
     (setq org-refile-targets '(
				("~/org/projects.org" :maxlevel . 4)
				("~/org/ideas.org" :level . 0)))
     (setq org-agenda-files '("~/org/projects.org" "~/org/inbox.org"))
   #+end_src

*** org-mobile
    #+begin_src emacs-lisp
      (setq org-mobile-files (list "~/org/projects.org"))
      (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
    #+end_src

** [[https://orgmode.org/guide/Introduction.html#Activation][Global keys]]
   =C-c l= will remember the link to the current location to be
   available the next time a link is created with =C-c C-l=.

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c l") 'org-store-link)
     (global-set-key (kbd "C-c a") 'org-agenda)
     (global-set-key (kbd "C-c c") 'org-capture)
   #+end_src


** Mode keys
   =C-a=/=C-e= will jump between the beginning/end of the current
   heading and the beginnining/end of the line. It will always stop
   /before/ the content collapsed under the current heading.

   ~org-M-RET-may-split-line~ will allow creating new headings/items
   when the cursor is in the middle of a line, without making the rest
   of the line part of the new item.

   #+begin_src emacs-lisp
     (setq org-special-ctrl-a/e t)
     (setq org-M-RET-may-split-line nil)
   #+end_src

** Customizations
   ~org-refile-use-outline-path~ will enable hierarchical completion
   for refile.  Besides simplifying navigation of deep hierarchies and
   removing ambiguity of headings, it will also allow to refile as a
   top level item to a given file.

   ~org-refile-allow-creating-parent-nodes~ will allow refiling to a
   newly created parent heading by adding =/<new heading>= to the
   path.

   #+begin_src emacs-lisp
     (setq org-refile-use-outline-path 'file)
     (setq org-refile-allow-creating-parent-nodes 'confirm)
   #+end_src
